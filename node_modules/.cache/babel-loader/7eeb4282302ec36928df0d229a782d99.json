{"ast":null,"code":"import _regeneratorRuntime from \"/home/leo/Documents/github/tcc/front/not-found/front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/leo/Documents/github/tcc/front/not-found/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/leo/Documents/github/tcc/front/not-found/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/leo/Documents/github/tcc/front/not-found/front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\n\nvar SolidWasteCollectedClient =\n/*#__PURE__*/\nfunction () {\n  function SolidWasteCollectedClient(url) {\n    _classCallCheck(this, SolidWasteCollectedClient);\n\n    this.url = url;\n    this.request = axios.create({\n      baseURL: url,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  _createClass(SolidWasteCollectedClient, [{\n    key: \"getAllWasteByPeriod\",\n    value: function () {\n      var _getAllWasteByPeriod = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(period, interval, type) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.request.get(\"/all-wastes?period=\".concat(period, \"&interval=\").concat(interval, \"&idTypeSolidWaste=\").concat(type || ''));\n\n              case 2:\n                response = _context.sent;\n                return _context.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function getAllWasteByPeriod(_x, _x2, _x3) {\n        return _getAllWasteByPeriod.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getAllWasteByPeriodFull\",\n    value: function () {\n      var _getAllWasteByPeriodFull = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(period, interval, type) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.request.get(\"/all-wastes-full?period=\".concat(period, \"&interval=\").concat(interval, \"&idTypeSolidWaste=\").concat(type || ''));\n\n              case 2:\n                response = _context2.sent;\n                return _context2.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function getAllWasteByPeriodFull(_x4, _x5, _x6) {\n        return _getAllWasteByPeriodFull.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getWastesByPeriod\",\n    value: function () {\n      var _getWastesByPeriod = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(startDate, endDate, type) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.request.get(\"/roda?startDate=\".concat(startDate, \"&endDate=\").concat(endDate, \"&idTypeSolidWaste=\").concat(type || ''));\n\n              case 2:\n                response = _context3.sent;\n                return _context3.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function getWastesByPeriod(_x7, _x8, _x9) {\n        return _getWastesByPeriod.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getWastesByPeriodFull\",\n    value: function () {\n      var _getWastesByPeriodFull = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(startDate, endDate, type) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.request.get(\"/roda-full?startDate=\".concat(startDate, \"&endDate=\").concat(endDate, \"&idTypeSolidWaste=\").concat(type || ''));\n\n              case 2:\n                response = _context4.sent;\n                return _context4.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function getWastesByPeriodFull(_x10, _x11, _x12) {\n        return _getWastesByPeriodFull.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getWasteByPeriod\",\n    value: function () {\n      var _getWasteByPeriod = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(period, interval, type) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.request.get(\"/wastes?period=\".concat(period, \"&interval=\").concat(interval, \"&idTypeSolidWaste=\").concat(type || ''));\n\n              case 2:\n                response = _context5.sent;\n                return _context5.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function getWasteByPeriod(_x13, _x14, _x15) {\n        return _getWasteByPeriod.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return SolidWasteCollectedClient;\n}();\n\nexport { SolidWasteCollectedClient as default };","map":{"version":3,"sources":["/home/leo/Documents/github/tcc/front/not-found/front/src/api/DataClient.js"],"names":["axios","SolidWasteCollectedClient","url","request","create","baseURL","timeout","headers","period","interval","type","get","response","startDate","endDate"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEqBC,yB;;;AAEjB,qCAAYC,GAAZ,EAAiB;AAAA;;AACb,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,OAAL,GAAeH,KAAK,CAACI,MAAN,CAAa;AACxBC,MAAAA,OAAO,EAAEH,GADe;AAExBI,MAAAA,OAAO,EAAE,KAFe;AAGxBC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHe,KAAb,CAAf;AAOH;;;;;;;gDAEyBC,M,EAAQC,Q,EAAUC,I;;;;;;;uBACjB,KAAKP,OAAL,CAAaQ,GAAb,8BAAuCH,MAAvC,uBAA0DC,QAA1D,+BAAuFC,IAAI,IAAI,EAA/F,E;;;AAAjBE,gBAAAA,Q;iDACCA,Q;;;;;;;;;;;;;;;;;;;iDAGmBJ,M,EAAQC,Q,EAAUC,I;;;;;;;uBACrB,KAAKP,OAAL,CAAaQ,GAAb,mCAA4CH,MAA5C,uBAA+DC,QAA/D,+BAA4FC,IAAI,IAAI,EAApG,E;;;AAAjBE,gBAAAA,Q;kDACCA,Q;;;;;;;;;;;;;;;;;;;iDAGaC,S,EAAWC,O,EAASJ,I;;;;;;;uBACjB,KAAKP,OAAL,CAAaQ,GAAb,2BAAoCE,SAApC,sBAAyDC,OAAzD,+BAAqFJ,IAAI,IAAI,EAA7F,E;;;AAAjBE,gBAAAA,Q;kDACCA,Q;;;;;;;;;;;;;;;;;;;iDAGiBC,S,EAAWC,O,EAASJ,I;;;;;;;uBACrB,KAAKP,OAAL,CAAaQ,GAAb,gCAAyCE,SAAzC,sBAA8DC,OAA9D,+BAA0FJ,IAAI,IAAI,EAAlG,E;;;AAAjBE,gBAAAA,Q;kDACCA,Q;;;;;;;;;;;;;;;;;;;iDAGYJ,M,EAAQC,Q,EAAUC,I;;;;;;;uBACd,KAAKP,OAAL,CAAaQ,GAAb,0BAAmCH,MAAnC,uBAAsDC,QAAtD,+BAAmFC,IAAI,IAAI,EAA3F,E;;;AAAjBE,gBAAAA,Q;kDACCA,Q;;;;;;;;;;;;;;;;;;;SAnCMX,yB","sourcesContent":["import axios from 'axios';\n\nexport default class SolidWasteCollectedClient {\n\n    constructor(url) {\n        this.url = url;\n        this.request = axios.create({\n            baseURL: url,\n            timeout: 30000,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n    }\n\n    async getAllWasteByPeriod(period, interval, type) {\n        const response = await this.request.get(`/all-wastes?period=${period}&interval=${interval}&idTypeSolidWaste=${type || ''}`);\n        return response;\n    }\n\n    async getAllWasteByPeriodFull(period, interval, type) {\n        const response = await this.request.get(`/all-wastes-full?period=${period}&interval=${interval}&idTypeSolidWaste=${type || ''}`);\n        return response;\n    }\n\n    async getWastesByPeriod(startDate, endDate, type) {\n        const response = await this.request.get(`/roda?startDate=${startDate}&endDate=${endDate}&idTypeSolidWaste=${type || ''}`);\n        return response;\n    }\n\n    async getWastesByPeriodFull(startDate, endDate, type) {\n        const response = await this.request.get(`/roda-full?startDate=${startDate}&endDate=${endDate}&idTypeSolidWaste=${type || ''}`);\n        return response;\n    }\n\n    async getWasteByPeriod(period, interval, type) {\n        const response = await this.request.get(`/wastes?period=${period}&interval=${interval}&idTypeSolidWaste=${type || ''}`);\n        return response;\n    }\n}"]},"metadata":{},"sourceType":"module"}