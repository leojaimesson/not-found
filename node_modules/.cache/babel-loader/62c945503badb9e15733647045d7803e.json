{"ast":null,"code":"import moment from 'moment';\n\nvar toTags = function toTags(typeSolidWaste) {\n  var tags = [];\n\n  if (typeSolidWaste.recyclable) {\n    tags.push('recyclable');\n  }\n\n  if (typeSolidWaste.reutilable) {\n    tags.push('reutilable');\n  }\n\n  return tags;\n};\n\nvar toUsersListData = function toUsersListData(users) {\n  return users.map(function (user) {\n    return {\n      key: user._id,\n      name: user.firstName,\n      email: user.email\n    };\n  });\n};\n\nvar toTypesSolidWasteData = function toTypesSolidWasteData(typesSolidWaste) {\n  return typesSolidWaste.map(function (typeSolidWaste) {\n    return {\n      key: typeSolidWaste._id,\n      name: typeSolidWaste.name,\n      description: typeSolidWaste.description,\n      color: typeSolidWaste.color,\n      tags: toTags(typeSolidWaste)\n    };\n  });\n};\n\nvar toSolidWasteCollectedData = function toSolidWasteCollectedData(solidWasteCollected) {\n  return solidWasteCollected.map(function (solidWasteCollected) {\n    return {\n      key: solidWasteCollected._id,\n      typeWasted: solidWasteCollected.typeWasted.name,\n      quantityCollected: solidWasteCollected.quantityCollected,\n      color: solidWasteCollected.typeWasted.color,\n      collectionDate: moment(new Date(solidWasteCollected.collectionDate)).format('DD/MM/YYYY')\n    };\n  });\n};\n\nexport default {\n  toUsersListData: toUsersListData,\n  toTypesSolidWasteData: toTypesSolidWasteData,\n  toSolidWasteCollectedData: toSolidWasteCollectedData,\n  toTags: toTags\n};","map":{"version":3,"sources":["/home/leo/Documents/github/tcc/front/not-found/front/src/helpers/DataList.js"],"names":["moment","toTags","typeSolidWaste","tags","recyclable","push","reutilable","toUsersListData","users","map","user","key","_id","name","firstName","email","toTypesSolidWasteData","typesSolidWaste","description","color","toSolidWasteCollectedData","solidWasteCollected","typeWasted","quantityCollected","collectionDate","Date","format"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,cAAD,EAAoB;AAC/B,MAAMC,IAAI,GAAG,EAAb;;AACA,MAAGD,cAAc,CAACE,UAAlB,EAA8B;AAC1BD,IAAAA,IAAI,CAACE,IAAL,CAAU,YAAV;AACH;;AACD,MAAGH,cAAc,CAACI,UAAlB,EAA8B;AAC1BH,IAAAA,IAAI,CAACE,IAAL,CAAU,YAAV;AACH;;AACD,SAAOF,IAAP;AACH,CATD;;AAWA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,GAAN,CAAU,UAACC,IAAD;AAAA,WAAW;AACpDC,MAAAA,GAAG,EAAED,IAAI,CAACE,GAD0C;AAEpDC,MAAAA,IAAI,EAAEH,IAAI,CAACI,SAFyC;AAGpDC,MAAAA,KAAK,EAAEL,IAAI,CAACK;AAHwC,KAAX;AAAA,GAAV,CAAX;AAAA,CAAxB;;AAMA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,eAAD;AAAA,SAAqBA,eAAe,CAACR,GAAhB,CAAoB,UAACP,cAAD;AAAA,WAAqB;AACxFS,MAAAA,GAAG,EAAET,cAAc,CAACU,GADoE;AAExFC,MAAAA,IAAI,EAAEX,cAAc,CAACW,IAFmE;AAGxFK,MAAAA,WAAW,EAAEhB,cAAc,CAACgB,WAH4D;AAIxFC,MAAAA,KAAK,EAAEjB,cAAc,CAACiB,KAJkE;AAKxFhB,MAAAA,IAAI,EAAEF,MAAM,CAACC,cAAD;AAL4E,KAArB;AAAA,GAApB,CAArB;AAAA,CAA9B;;AAQA,IAAMkB,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,mBAAD;AAAA,SAAyBA,mBAAmB,CAACZ,GAApB,CAAwB,UAACY,mBAAD;AAAA,WAA0B;AACzGV,MAAAA,GAAG,EAAEU,mBAAmB,CAACT,GADgF;AAEzGU,MAAAA,UAAU,EAAED,mBAAmB,CAACC,UAApB,CAA+BT,IAF8D;AAGzGU,MAAAA,iBAAiB,EAAEF,mBAAmB,CAACE,iBAHkE;AAIzGJ,MAAAA,KAAK,EAAEE,mBAAmB,CAACC,UAApB,CAA+BH,KAJmE;AAKzGK,MAAAA,cAAc,EAAExB,MAAM,CAAC,IAAIyB,IAAJ,CAASJ,mBAAmB,CAACG,cAA7B,CAAD,CAAN,CAAqDE,MAArD,CAA4D,YAA5D;AALyF,KAA1B;AAAA,GAAxB,CAAzB;AAAA,CAAlC;;AAQA,eAAe;AACXnB,EAAAA,eAAe,EAAfA,eADW;AAEXS,EAAAA,qBAAqB,EAArBA,qBAFW;AAGXI,EAAAA,yBAAyB,EAAzBA,yBAHW;AAIXnB,EAAAA,MAAM,EAANA;AAJW,CAAf","sourcesContent":["import moment from 'moment';\n\nconst toTags = (typeSolidWaste) => {\n    const tags = [];\n    if(typeSolidWaste.recyclable) {\n        tags.push('recyclable');\n    }\n    if(typeSolidWaste.reutilable) {\n        tags.push('reutilable');\n    }\n    return tags;\n}\n\nconst toUsersListData = (users) => users.map((user) => ({\n    key: user._id,\n    name: user.firstName,\n    email: user.email\n}));\n\nconst toTypesSolidWasteData = (typesSolidWaste) => typesSolidWaste.map((typeSolidWaste) => ({\n    key: typeSolidWaste._id,\n    name: typeSolidWaste.name,\n    description: typeSolidWaste.description,\n    color: typeSolidWaste.color,\n    tags: toTags(typeSolidWaste)\n}));\n\nconst toSolidWasteCollectedData = (solidWasteCollected) => solidWasteCollected.map((solidWasteCollected) => ({\n    key: solidWasteCollected._id,\n    typeWasted: solidWasteCollected.typeWasted.name,\n    quantityCollected: solidWasteCollected.quantityCollected,\n    color: solidWasteCollected.typeWasted.color,\n    collectionDate: moment(new Date(solidWasteCollected.collectionDate)).format('DD/MM/YYYY'),\n}));\n\nexport default {\n    toUsersListData,\n    toTypesSolidWasteData,\n    toSolidWasteCollectedData,\n    toTags,\n}"]},"metadata":{},"sourceType":"module"}