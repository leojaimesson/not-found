{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar PropTypes = _interopDefault(require('prop-types'));\n\nvar core = require('@nivo/core');\n\nvar compose = _interopDefault(require('recompose/compose'));\n\nvar pure = _interopDefault(require('recompose/pure'));\n\nvar reactMotion = require('react-motion');\n\nvar withState = _interopDefault(require('recompose/withState'));\n\nvar withHandlers = _interopDefault(require('recompose/withHandlers'));\n\nvar withPropsOnChange = _interopDefault(require('recompose/withPropsOnChange'));\n\nvar legends = require('@nivo/legends');\n\nvar range = _interopDefault(require('lodash/range'));\n\nvar d3Shape = require('d3-shape');\n\nvar d3Scale = require('d3-scale');\n\nvar d3Format = require('d3-format');\n\nvar defaultProps = _interopDefault(require('recompose/defaultProps'));\n\nvar sortBy = _interopDefault(require('lodash/sortBy'));\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar StreamLayers = function StreamLayers(_ref) {\n  var layers = _ref.layers,\n      fillOpacity = _ref.fillOpacity,\n      borderWidth = _ref.borderWidth,\n      getBorderColor = _ref.getBorderColor,\n      theme = _ref.theme,\n      showTooltip = _ref.showTooltip,\n      hideTooltip = _ref.hideTooltip,\n      getTooltipLabel = _ref.getTooltipLabel,\n      animate = _ref.animate,\n      motionStiffness = _ref.motionStiffness,\n      motionDamping = _ref.motionDamping;\n\n  if (animate !== true) {\n    return React__default.createElement('g', null, layers.map(function (layer, i) {\n      var path = layer.path,\n          color = layer.color;\n\n      var handleTooltip = function handleTooltip(e) {\n        return showTooltip(React__default.createElement(core.BasicTooltip, {\n          id: getTooltipLabel(layer),\n          enableChip: true,\n          color: color,\n          theme: theme\n        }), e);\n      };\n\n      return React__default.createElement('path', {\n        key: i,\n        onMouseMove: handleTooltip,\n        onMouseEnter: handleTooltip,\n        onMouseLeave: hideTooltip,\n        d: path,\n        fill: layer.fill ? layer.fill : layer.color,\n        fillOpacity: fillOpacity,\n        stroke: getBorderColor(layer),\n        strokeWidth: borderWidth\n      });\n    }));\n  }\n\n  var springConfig = {\n    stiffness: motionStiffness,\n    damping: motionDamping\n  };\n  return React__default.createElement('g', null, layers.map(function (layer, i) {\n    var path = layer.path,\n        color = layer.color;\n\n    var handleTooltip = function handleTooltip(e) {\n      return showTooltip(React__default.createElement(core.BasicTooltip, {\n        id: getTooltipLabel(layer),\n        enableChip: true,\n        color: color,\n        theme: theme\n      }), e);\n    };\n\n    return React__default.createElement(core.SmartMotion, {\n      key: i,\n      style: function style(spring) {\n        return {\n          d: spring(path, springConfig),\n          fill: spring(color, springConfig),\n          fillOpacity: spring(fillOpacity, springConfig)\n        };\n      }\n    }, function (style) {\n      return React__default.createElement('path', _extends({\n        onMouseMove: handleTooltip,\n        onMouseEnter: handleTooltip,\n        onMouseLeave: hideTooltip\n      }, style, {\n        fill: layer.fill ? layer.fill : style.fill,\n        stroke: getBorderColor(layer),\n        strokeWidth: borderWidth\n      }));\n    });\n  }));\n};\n\nStreamLayers.propTypes = _extends({\n  fillOpacity: PropTypes.number.isRequired,\n  borderWidth: PropTypes.number.isRequired,\n  getBorderColor: PropTypes.func.isRequired,\n  theme: PropTypes.object.isRequired,\n  showTooltip: PropTypes.func.isRequired,\n  hideTooltip: PropTypes.func.isRequired,\n  getTooltipLabel: PropTypes.func.isRequired\n}, core.motionPropTypes);\n\nvar getDotY = function getDotY(datum, position) {\n  var y = datum.y2;\n\n  if (position === 'center') {\n    y = datum.y1 + (datum.y2 - datum.y1) / 2;\n  } else if (position === 'start') {\n    y = datum.y1;\n  }\n\n  return y;\n};\n\nvar StreamDots = function StreamDots(_ref) {\n  var id = _ref.id,\n      color = _ref.color,\n      data = _ref.data,\n      renderDot = _ref.renderDot,\n      position = _ref.position,\n      getSize = _ref.getSize,\n      getColor = _ref.getColor,\n      getBorderWidth = _ref.getBorderWidth,\n      getBorderColor = _ref.getBorderColor,\n      animate = _ref.animate,\n      motionStiffness = _ref.motionStiffness,\n      motionDamping = _ref.motionDamping;\n\n  if (animate !== true) {\n    return data.map(function (d, i) {\n      var datum = _extends({}, d, {\n        key: id,\n        color: color\n      });\n\n      return React__default.createElement(React.Fragment, {\n        key: i\n      }, renderDot({\n        data: datum,\n        x: datum.x,\n        y: getDotY(datum, position),\n        size: getSize(datum),\n        color: getColor(datum),\n        borderWidth: getBorderWidth(datum)\n      }));\n    });\n  }\n\n  var springConfig = {\n    stiffness: motionStiffness,\n    damping: motionDamping\n  };\n  return React__default.createElement(reactMotion.TransitionMotion, {\n    styles: data.map(function (d, i) {\n      var datum = _extends({}, d, {\n        key: id,\n        color: color\n      });\n\n      return {\n        key: '' + i,\n        data: datum,\n        style: {\n          x: reactMotion.spring(datum.x, springConfig),\n          y: reactMotion.spring(getDotY(datum, position), springConfig),\n          size: reactMotion.spring(getSize(datum), springConfig),\n          borderWidth: reactMotion.spring(getBorderWidth(datum), springConfig)\n        }\n      };\n    })\n  }, function (interpolatedStyles) {\n    return React__default.createElement(React.Fragment, null, interpolatedStyles.map(function (_ref2) {\n      var key = _ref2.key,\n          style = _ref2.style,\n          datum = _ref2.data;\n      return React__default.createElement(React.Fragment, {\n        key: key\n      }, renderDot({\n        data: datum,\n        x: style.x,\n        y: style.y,\n        size: style.size,\n        color: getColor(datum),\n        borderWidth: style.borderWidth,\n        borderColor: getBorderColor(datum)\n      }));\n    }));\n  });\n};\n\nStreamDots.propTypes = _extends({\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  color: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    x: PropTypes.number.isRequired,\n    y1: PropTypes.number.isRequired,\n    y2: PropTypes.number.isRequired\n  })).isRequired,\n  renderDot: PropTypes.func.isRequired,\n  position: PropTypes.oneOf(['start', 'center', 'end']).isRequired,\n  getSize: PropTypes.func.isRequired,\n  getColor: PropTypes.func.isRequired,\n  getBorderWidth: PropTypes.func.isRequired,\n  getBorderColor: PropTypes.func.isRequired\n}, core.motionPropTypes);\nvar enhance = compose(pure);\nvar StreamDots$1 = enhance(StreamDots);\n\nvar StreamSlicesItem = function StreamSlicesItem(_ref) {\n  var slice = _ref.slice,\n      height = _ref.height,\n      showTooltip = _ref.showTooltip,\n      hideTooltip = _ref.hideTooltip,\n      isHover = _ref.isHover;\n  return React__default.createElement('g', {\n    transform: 'translate(' + slice.x + ', 0)'\n  }, isHover && React__default.createElement('line', {\n    x1: 0,\n    x2: 0,\n    y1: 0,\n    y2: height,\n    stroke: '#000',\n    strokeOpacity: 0.35,\n    strokeWidth: 1\n  }), React__default.createElement('rect', {\n    x: -20,\n    width: 40,\n    height: height,\n    fill: '#000',\n    fillOpacity: 0,\n    onMouseEnter: showTooltip,\n    onMouseMove: showTooltip,\n    onMouseLeave: hideTooltip\n  }));\n};\n\nStreamSlicesItem.propTypes = {\n  slice: PropTypes.object.isRequired,\n  height: PropTypes.number.isRequired,\n  showTooltip: PropTypes.func.isRequired,\n  hideTooltip: PropTypes.func.isRequired,\n  getTooltipLabel: PropTypes.func.isRequired,\n  getTooltipValue: PropTypes.func.isRequired,\n  isHover: PropTypes.bool.isRequired,\n  theme: PropTypes.object.isRequired\n};\nvar enhance$1 = compose(withState('isHover', 'setIsHover', false), withPropsOnChange(['slice', 'theme', 'getTooltipLabel', 'getTooltipValue'], function (_ref2) {\n  var slice = _ref2.slice,\n      theme = _ref2.theme,\n      getTooltipLabel = _ref2.getTooltipLabel,\n      getTooltipValue = _ref2.getTooltipValue;\n  return {\n    tooltip: React__default.createElement(core.TableTooltip, {\n      theme: theme,\n      rows: slice.stack.map(function (p) {\n        return [React__default.createElement(core.Chip, {\n          key: p.id,\n          color: p.color\n        }), getTooltipLabel(p), getTooltipValue(p)];\n      })\n    })\n  };\n}), withHandlers({\n  showTooltip: function showTooltip(_ref3) {\n    var _showTooltip = _ref3.showTooltip,\n        setIsHover = _ref3.setIsHover,\n        tooltip = _ref3.tooltip;\n    return function (e) {\n      setIsHover(true);\n\n      _showTooltip(tooltip, e);\n    };\n  },\n  hideTooltip: function hideTooltip(_ref4) {\n    var _hideTooltip = _ref4.hideTooltip,\n        setIsHover = _ref4.setIsHover;\n    return function () {\n      setIsHover(false);\n\n      _hideTooltip();\n    };\n  }\n}), pure);\nvar StreamSlicesItem$1 = enhance$1(StreamSlicesItem);\n\nvar StreamSlices = function StreamSlices(_ref) {\n  var slices = _ref.slices,\n      height = _ref.height,\n      showTooltip = _ref.showTooltip,\n      hideTooltip = _ref.hideTooltip,\n      theme = _ref.theme,\n      getTooltipLabel = _ref.getTooltipLabel,\n      getTooltipValue = _ref.getTooltipValue;\n  return React__default.createElement('g', null, slices.map(function (slice) {\n    return React__default.createElement(StreamSlicesItem$1, {\n      key: slice.index,\n      slice: slice,\n      height: height,\n      showTooltip: showTooltip,\n      hideTooltip: hideTooltip,\n      theme: theme,\n      getTooltipLabel: getTooltipLabel,\n      getTooltipValue: getTooltipValue\n    });\n  }));\n};\n\nStreamSlices.propTypes = {\n  slices: PropTypes.arrayOf(PropTypes.shape({\n    index: PropTypes.number.isRequired,\n    x: PropTypes.number.isRequired,\n    stack: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n      value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n      color: PropTypes.string.isRequired\n    })).isRequired\n  })).isRequired,\n  height: PropTypes.number.isRequired,\n  showTooltip: PropTypes.func.isRequired,\n  hideTooltip: PropTypes.func.isRequired,\n  getTooltipLabel: PropTypes.func.isRequired,\n  getTooltipValue: PropTypes.func.isRequired,\n  theme: PropTypes.object.isRequired\n};\nvar StreamSlices$1 = pure(StreamSlices);\n\nvar StreamDotsItem = function StreamDotsItem(_ref) {\n  var x = _ref.x,\n      y = _ref.y,\n      size = _ref.size,\n      color = _ref.color,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor;\n  return React__default.createElement('circle', {\n    cx: x,\n    cy: y,\n    r: size * 0.5,\n    fill: color,\n    strokeWidth: borderWidth,\n    stroke: borderColor\n  });\n};\n\nStreamDotsItem.propTypes = {\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  size: PropTypes.number.isRequired,\n  color: PropTypes.string.isRequired,\n  borderWidth: PropTypes.number.isRequired,\n  borderColor: PropTypes.string.isRequired\n};\nvar StreamPropTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  keys: PropTypes.array.isRequired,\n  stack: PropTypes.func.isRequired,\n  xScale: PropTypes.func.isRequired,\n  yScale: PropTypes.func.isRequired,\n  order: core.stackOrderPropType.isRequired,\n  offsetType: core.stackOffsetPropType.isRequired,\n  curve: core.areaCurvePropType.isRequired,\n  areaGenerator: PropTypes.func.isRequired,\n  axisTop: PropTypes.object,\n  axisRight: PropTypes.object,\n  axisBottom: PropTypes.object,\n  axisLeft: PropTypes.object,\n  enableGridX: PropTypes.bool.isRequired,\n  enableGridY: PropTypes.bool.isRequired,\n  colors: PropTypes.any.isRequired,\n  fillOpacity: PropTypes.number.isRequired,\n  getColor: PropTypes.func.isRequired,\n  // computed\n  defs: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired\n  })).isRequired,\n  fill: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    match: PropTypes.oneOfType([PropTypes.oneOf(['*']), PropTypes.object, PropTypes.func]).isRequired\n  })).isRequired,\n  borderWidth: PropTypes.number.isRequired,\n  borderColor: PropTypes.any.isRequired,\n  getBorderColor: PropTypes.func.isRequired,\n  // computed\n  enableDots: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]).isRequired,\n  renderDot: PropTypes.func.isRequired,\n  dotPosition: PropTypes.oneOf(['start', 'center', 'end']).isRequired,\n  dotSize: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n  getDotSize: PropTypes.func.isRequired,\n  dotColor: PropTypes.any.isRequired,\n  dotBorderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n  getDotBorderWidth: PropTypes.func.isRequired,\n  dotBorderColor: PropTypes.any.isRequired,\n  isInteractive: PropTypes.bool,\n  tooltipLabel: PropTypes.func,\n  getTooltipLabel: PropTypes.func.isRequired,\n  tooltipFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  getTooltipValue: PropTypes.func.isRequired,\n  enableStackTooltip: PropTypes.bool.isRequired,\n  legends: PropTypes.arrayOf(PropTypes.shape(legends.LegendPropShape)).isRequired\n};\nvar StreamDefaultProps = {\n  order: 'none',\n  offsetType: 'wiggle',\n  curve: 'catmullRom',\n  axisBottom: {},\n  enableGridX: true,\n  enableGridY: false,\n  borderWidth: 0,\n  borderColor: 'inherit:darker(1)',\n  colors: 'nivo',\n  fillOpacity: 1,\n  defs: [],\n  fill: [],\n  enableDots: false,\n  dotPosition: 'center',\n  renderDot: StreamDotsItem,\n  dotSize: 6,\n  dotColor: 'inherit',\n  dotBorderWidth: 0,\n  dotBorderColor: 'inherit',\n  isInteractive: true,\n  enableStackTooltip: true,\n  legends: []\n};\n\nvar stackMin = function stackMin(layers) {\n  return Math.min.apply(Math, layers.reduce(function (acc, layer) {\n    return [].concat(acc, layer.map(function (d) {\n      return d[0];\n    }));\n  }, []));\n};\n\nvar stackMax = function stackMax(layers) {\n  return Math.max.apply(Math, layers.reduce(function (acc, layer) {\n    return [].concat(acc, layer.map(function (d) {\n      return d[1];\n    }));\n  }, []));\n};\n\nvar enhance$2 = function enhance$2(Component) {\n  return compose(defaultProps(StreamDefaultProps), core.withTheme(), core.withCurve(), core.withDimensions(), core.withMotion(), withPropsOnChange(['curveInterpolator'], function (_ref) {\n    var curveInterpolator = _ref.curveInterpolator;\n    return {\n      areaGenerator: d3Shape.area().x(function (_ref2) {\n        var x = _ref2.x;\n        return x;\n      }).y0(function (_ref3) {\n        var y1 = _ref3.y1;\n        return y1;\n      }).y1(function (_ref4) {\n        var y2 = _ref4.y2;\n        return y2;\n      }).curve(curveInterpolator)\n    };\n  }), withPropsOnChange(['colors'], function (_ref5) {\n    var colors = _ref5.colors;\n    return {\n      getColor: core.getColorRange(colors)\n    };\n  }), withPropsOnChange(['borderColor'], function (_ref6) {\n    var borderColor = _ref6.borderColor;\n    return {\n      getBorderColor: core.getInheritedColorGenerator(borderColor)\n    };\n  }), withPropsOnChange(['keys', 'offsetType', 'order'], function (_ref7) {\n    var keys = _ref7.keys,\n        offsetType = _ref7.offsetType,\n        order = _ref7.order;\n    return {\n      stack: d3Shape.stack().keys(keys).offset(core.stackOffsetFromProp(offsetType)).order(core.stackOrderFromProp(order))\n    };\n  }), withPropsOnChange(['stack', 'data', 'width', 'height'], function (_ref8) {\n    var stack = _ref8.stack,\n        data = _ref8.data,\n        width = _ref8.width,\n        height = _ref8.height;\n    var layers = stack(data);\n    layers.forEach(function (layer) {\n      layer.forEach(function (point) {\n        point.value = point.data[layer.key];\n      });\n    });\n    var minValue = stackMin(layers);\n    var maxValue = stackMax(layers);\n    return {\n      layers: layers,\n      xScale: d3Scale.scalePoint().domain(range(data.length)).range([0, width]),\n      yScale: d3Scale.scaleLinear().domain([minValue, maxValue]).range([height, 0])\n    };\n  }), withPropsOnChange(['dotSize'], function (_ref9) {\n    var dotSize = _ref9.dotSize;\n    return {\n      getDotSize: typeof dotSize === 'function' ? dotSize : function () {\n        return dotSize;\n      }\n    };\n  }), withPropsOnChange(['dotColor'], function (_ref10) {\n    var dotColor = _ref10.dotColor;\n    return {\n      getDotColor: core.getInheritedColorGenerator(dotColor)\n    };\n  }), withPropsOnChange(['dotBorderWidth'], function (_ref11) {\n    var dotBorderWidth = _ref11.dotBorderWidth;\n    return {\n      getDotBorderWidth: typeof dotBorderWidth === 'function' ? dotBorderWidth : function () {\n        return dotBorderWidth;\n      }\n    };\n  }), withPropsOnChange(['dotBorderColor'], function (_ref12) {\n    var dotBorderColor = _ref12.dotBorderColor;\n    return {\n      getDotBorderColor: core.getInheritedColorGenerator(dotBorderColor)\n    };\n  }), withPropsOnChange(['tooltipLabel', 'tooltipFormat'], function (_ref13) {\n    var tooltipLabel = _ref13.tooltipLabel,\n        tooltipFormat = _ref13.tooltipFormat;\n\n    var getTooltipLabel = function getTooltipLabel(d) {\n      return d.id;\n    };\n\n    if (typeof tooltipLabel === 'function') {\n      getTooltipLabel = tooltipLabel;\n    }\n\n    var getTooltipValue = function getTooltipValue(d) {\n      return d.value;\n    };\n\n    if (typeof tooltipFormat === 'function') {\n      getTooltipValue = tooltipFormat;\n    } else if (typeof tooltipFormat === 'string' || tooltipFormat instanceof String) {\n      var formatter = d3Format.format(tooltipFormat);\n\n      getTooltipValue = function getTooltipValue(d) {\n        return formatter(d.value);\n      };\n    }\n\n    return {\n      getTooltipValue: getTooltipValue,\n      getTooltipLabel: getTooltipLabel\n    };\n  }), pure)(Component);\n};\n\nvar Stream = function Stream(_ref) {\n  var data = _ref.data,\n      keys = _ref.keys,\n      xScale = _ref.xScale,\n      yScale = _ref.yScale,\n      layers = _ref.layers,\n      areaGenerator = _ref.areaGenerator,\n      margin = _ref.margin,\n      width = _ref.width,\n      height = _ref.height,\n      outerWidth = _ref.outerWidth,\n      outerHeight = _ref.outerHeight,\n      axisTop = _ref.axisTop,\n      axisRight = _ref.axisRight,\n      axisBottom = _ref.axisBottom,\n      axisLeft = _ref.axisLeft,\n      enableGridX = _ref.enableGridX,\n      enableGridY = _ref.enableGridY,\n      theme = _ref.theme,\n      getColor = _ref.getColor,\n      fillOpacity = _ref.fillOpacity,\n      borderWidth = _ref.borderWidth,\n      getBorderColor = _ref.getBorderColor,\n      defs = _ref.defs,\n      fill = _ref.fill,\n      enableDots = _ref.enableDots,\n      dotPosition = _ref.dotPosition,\n      renderDot = _ref.renderDot,\n      getDotSize = _ref.getDotSize,\n      getDotColor = _ref.getDotColor,\n      getDotBorderWidth = _ref.getDotBorderWidth,\n      getDotBorderColor = _ref.getDotBorderColor,\n      animate = _ref.animate,\n      motionStiffness = _ref.motionStiffness,\n      motionDamping = _ref.motionDamping,\n      isInteractive = _ref.isInteractive,\n      getTooltipValue = _ref.getTooltipValue,\n      getTooltipLabel = _ref.getTooltipLabel,\n      enableStackTooltip = _ref.enableStackTooltip,\n      legends$$1 = _ref.legends;\n  var enhancedLayers = layers.map(function (points, i) {\n    var layer = points.map(function (point, i) {\n      return {\n        index: i,\n        x: xScale(i),\n        value: point.value,\n        y1: yScale(point[0]),\n        y2: yScale(point[1])\n      };\n    });\n    return {\n      id: keys[i],\n      layer: layer,\n      path: areaGenerator(layer),\n      color: getColor(i)\n    };\n  });\n  var slices = range(data.length).map(function (i) {\n    return {\n      index: i,\n      x: enhancedLayers[0].layer[i].x,\n      stack: sortBy(enhancedLayers.map(function (layer) {\n        return _extends({\n          id: layer.id,\n          color: layer.color\n        }, layer.layer[i]);\n      }), 'y2')\n    };\n  });\n  var motionProps = {\n    animate: animate,\n    motionDamping: motionDamping,\n    motionStiffness: motionStiffness\n  };\n  var boundDefs = core.bindDefs(defs, enhancedLayers, fill);\n  return React__default.createElement(core.Container, {\n    isInteractive: isInteractive,\n    theme: theme\n  }, function (_ref2) {\n    var showTooltip = _ref2.showTooltip,\n        hideTooltip = _ref2.hideTooltip;\n    return React__default.createElement(core.SvgWrapper, {\n      width: outerWidth,\n      height: outerHeight,\n      margin: margin,\n      defs: boundDefs,\n      theme: theme\n    }, React__default.createElement(core.Grid, _extends({\n      theme: theme,\n      width: width,\n      height: height,\n      xScale: enableGridX ? xScale : null,\n      yScale: enableGridY ? yScale : null\n    }, motionProps)), React__default.createElement(StreamLayers, _extends({\n      layers: enhancedLayers,\n      fillOpacity: fillOpacity,\n      borderWidth: borderWidth,\n      getBorderColor: getBorderColor,\n      showTooltip: showTooltip,\n      hideTooltip: hideTooltip,\n      getTooltipLabel: getTooltipLabel,\n      theme: theme\n    }, motionProps)), React__default.createElement(core.Axes, _extends({\n      xScale: xScale,\n      yScale: yScale,\n      width: width,\n      height: height,\n      theme: theme,\n      top: axisTop,\n      right: axisRight,\n      bottom: axisBottom,\n      left: axisLeft\n    }, motionProps)), enableDots && enhancedLayers.map(function (layer) {\n      return React__default.createElement(StreamDots$1, _extends({\n        key: layer.id,\n        id: layer.id,\n        color: layer.color,\n        data: layer.layer,\n        renderDot: renderDot,\n        position: dotPosition,\n        getSize: getDotSize,\n        getColor: getDotColor,\n        getBorderWidth: getDotBorderWidth,\n        getBorderColor: getDotBorderColor\n      }, motionProps));\n    }), isInteractive && enableStackTooltip && React__default.createElement(StreamSlices$1, {\n      slices: slices,\n      height: height,\n      showTooltip: showTooltip,\n      hideTooltip: hideTooltip,\n      theme: theme,\n      getTooltipValue: getTooltipValue,\n      getTooltipLabel: getTooltipLabel\n    }), legends$$1.map(function (legend, i) {\n      var legendData = enhancedLayers.map(function (l) {\n        return {\n          id: l.id,\n          label: l.id,\n          color: l.color,\n          fill: l.fill\n        };\n      }).reverse();\n      return React__default.createElement(legends.BoxLegendSvg, _extends({\n        key: i\n      }, legend, {\n        containerWidth: width,\n        containerHeight: height,\n        data: legendData,\n        theme: theme\n      }));\n    }));\n  });\n};\n\nStream.propTypes = StreamPropTypes;\nvar enhancedStream = enhance$2(Stream);\nenhancedStream.displayName = 'Stream';\n\nvar ResponsiveStream = function ResponsiveStream(props) {\n  return React__default.createElement(core.ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React__default.createElement(enhancedStream, _extends({\n      width: width,\n      height: height\n    }, props));\n  });\n};\n\nexports.Stream = enhancedStream;\nexports.ResponsiveStream = ResponsiveStream;\nexports.StreamPropTypes = StreamPropTypes;\nexports.StreamDefaultProps = StreamDefaultProps;","map":null,"metadata":{},"sourceType":"script"}